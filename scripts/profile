#!/usr/bin/env bash

# Print which RTS options are available.
# cabal exec -- $program_name +RTS -?

# See https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/profiling.html#profiling
# Run the program with
# -p: profiling support
# -S: additional statistics
# -h: memory heap profile
# -H: set heap size
# -K: set stack size
# -l: event log (compile option is necessary)

set -e

source include

# Files created during profiling have the name of the executable. This function
# renames them appropriately and adds the name of the given sub command.
move-profiles() {
    if [[ $# != 2 ]]
    then
        echo "Error in move-profiles."
        exit 1
    fi
    pat=$1
    sub=$2
    for f in "${pat}".*
    do
        bn=${f%.*}
        sf=${f##*.}
        mv "$f" "${bn}-${sub}.${sf}"
    done
}

slynx-examine() {
    msg "Slynx examine profile run."
    file_profile="../slynx/data/Profile.fa.gz"
    cabal run --enable-profiling -- slynx -f -o slynx-examine \
          examine -a ProteinI "$file_profile" \
          +RTS -p -hc -l -s || exit 1
}

slynx-simulate() {
    msg "SLynx simulate profile run."
    file_tree="../elynx-tree/data/Newick.tree"
    file_edm="../elynx-markov/data/EDMDistsPhylobayes.txt"
    cabal exec --enable-profiling -- slynx -f -o slynx-simulate \
          simulate -t "$file_tree" -e "$file_edm" -m "EDM(LG-Custom)" -l 5000 -S [0] \
          +RTS -p -hc -l -s || exit 1
}

slynx-simulate-siteprofiles() {
    msg "SLynx simulate with siteprofiles profile run."
    file_tree="../elynx-tree/data/Newick.tree"
    file_sp="../elynx-markov/data/HSSPMany.siteprofiles"
    cabal exec --enable-profiling -- slynx -f -o slynx-simulate \
          simulate -t "$file_tree" -m "EDM(Poisson-Custom)" -p "$file_sp" -l 5000 -S [0] \
          +RTS -p -hc -l -s || exit 1
}

tlynx-simulate() {
    msg "TLynx simulate profile run."
    cabal exec --enable-profiling -- tlynx -f -o tlynx-simulate \
          simulate -t 10 -n 25000 -r 0.5 -u -S [0] \
          +RTS -p -hc -l -s || exit 1
}

graph() {
    msg "Create graphs of the memory heap profiles."
    for f in *.hp
    do
        hp2pretty "$f"
    done
}

if [[ $1 == "slynx-examine" ]]
then
    slynx-examine
    move-profiles slynx examine
elif [[ $1 == "slynx-simulate" ]]
then
    slynx-simulate
    move-profiles slynx simulate
elif [[ $1 == "slynx-simulate-siteprofiles" ]]
then
    slynx-simulate-siteprofiles
    move-profiles slynx simulate
elif [[ $1 == "tlynx-simulate" ]]
then
    tlynx-simulate
    move-profiles tlynx simulate
else
    echo "Usage: $(basename "$0") (slynx-examine|slynx-simulate|tlynx-simulate)"
    exit 1
fi

graph
